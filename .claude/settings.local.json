{
  "permissions": {
    "allow": [
      "mcp__sequential-thinking__sequentialthinking",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "Bash(md-tree:*)",
      "Bash(npm install:*)",
      "Bash(sudo npm install -g @kayvan/markdown-tree-parser)",
      "Bash(mkdir:*)",
      "Bash(python -m alembic revision:*)",
      "Bash(python3 -m alembic revision:*)",
      "Bash(chmod:*)",
      "Bash(npm run test:*)",
      "Bash(python -m pytest -v)",
      "Bash(python3 -m pytest -v)",
      "Bash(npm run lint)",
      "Bash(python:*)",
      "Bash(docker-compose up:*)",
      "Bash(sudo systemctl stop:*)",
      "Bash(ss:*)",
      "Bash(docker-compose:*)",
      "Bash(export DATABASE_URL=postgresql://postgres:password@localhost:5433/xm_port_dev)",
      "Bash(export DATABASE_URL_ASYNC=postgresql+asyncpg://postgres:password@localhost:5433/xm_port_dev)",
      "Bash(export SECRET_KEY=GE3j2VqzbyfloO6oqa4zJqmQcJuMgKdryNUGdnJl0p4)",
      "Bash(export OPENAI_API_KEY=dummy_key_for_migration)",
      "Bash(SECRET_KEY=GE3j2VqzbyfloO6oqa4zJqmQcJuMgKdryNUGdnJl0p4 DATABASE_URL=postgresql://postgres:password@localhost:5433/xm_port_dev DATABASE_URL_ASYNC=postgresql+asyncpg://postgres:password@localhost:5433/xm_port_dev OPENAI_API_KEY=dummy_key_for_test python -m pytest tests/ -v)",
      "Bash(SECRET_KEY=GE3j2VqzbyfloO6oqa4zJqmQcJuMgKdryNUGdnJl0p4 DATABASE_URL=postgresql://postgres:password@localhost:5433/xm_port_dev DATABASE_URL_ASYNC=postgresql+asyncpg://postgres:password@localhost:5433/xm_port_dev OPENAI_API_KEY=dummy_key_for_test python -m pytest tests/unit/test_models.py -v)",
      "Bash(pip install:*)",
      "Bash(SECRET_KEY=GE3j2VqzbyfloO6oqa4zJqmQcJuMgKdryNUGdnJl0p4 JWT_SECRET_KEY=test-jwt-secret-key PYTHONPATH=/mnt/d/PROJECTS/XM-PORT/apps/api python -m pytest tests/unit/test_auth_service.py -v)",
      "Bash(npm test)",
      "Bash(export SECRET_KEY=test_secret)",
      "Bash(export JWT_SECRET_KEY=test_jwt_secret)",
      "Bash(export DATABASE_URL=sqlite:///test.db)",
      "Bash(export DATABASE_URL_ASYNC=sqlite+aiosqlite:///test.db)",
      "Bash(export OPENAI_API_KEY=test_key)",
      "Bash(export SECRET_KEY=\"test_secret_key_that_is_32_chars_long\")",
      "Bash(export JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\")",
      "Bash(SECRET_KEY=GE3j2VqzbyfloO6oqa4zJqmQcJuMgKdryNUGdnJl0p4 DATABASE_URL=postgresql://postgres:password@localhost:5433/xm_port_dev DATABASE_URL_ASYNC=postgresql+asyncpg://postgres:password@localhost:5433/xm_port_dev OPENAI_API_KEY=dummy_key_for_test python -m pytest apps/api/tests/unit/test_auth_service.py -v)",
      "Bash(SECRET_KEY=GE3j2VqzbyfloO6oqa4zJqmQcJuMgKdryNUGdnJl0p4 DATABASE_URL=postgresql://postgres:password@localhost:5433/xm_port_dev DATABASE_URL_ASYNC=postgresql+asyncpg://postgres:password@localhost:5433/xm_port_dev OPENAI_API_KEY=dummy_key_for_test python -m pytest apps/api/tests/integration/test_auth_api.py -v)",
      "Bash(SECRET_KEY=GE3j2VqzbyfloO6oqa4zJqmQcJuMgKdryNUGdnJl0p4 DATABASE_URL=postgresql://postgres:password@localhost:5433/xm_port_dev DATABASE_URL_ASYNC=postgresql+asyncpg://postgres:password@localhost:5433/xm_port_dev OPENAI_API_KEY=dummy_key_for_test python -m pytest tests/unit/test_auth_service.py -v)",
      "Bash(SECRET_KEY=GE3j2VqzbyfloO6oqa4zJqmQcJuMgKdryNUGdnJl0p4 JWT_SECRET_KEY=GE3j2VqzbyfloO6oqa4zJqmQcJuMgKdryNUGdnJl0p4 DATABASE_URL=postgresql://postgres:password@localhost:5433/xm_port_dev DATABASE_URL_ASYNC=postgresql+asyncpg://postgres:password@localhost:5433/xm_port_dev OPENAI_API_KEY=dummy_key_for_test python -m pytest tests/unit/test_auth_service.py -v)",
      "Bash(find:*)",
      "Bash(npx shadcn-ui:*)",
      "Bash(npx shadcn@latest add:*)",
      "Bash(mv:*)",
      "Bash(rmdir:*)",
      "Bash(npm run build:*)",
      "Bash(npx tsc:*)",
      "Bash(grep:*)",
      "Bash(npm test:*)",
      "Bash(npm ls:*)",
      "Bash(SECRET_KEY=GE3j2VqzbyfloO6oqa4zJqmQcJuMgKdryNUGdnJl0p4 JWT_SECRET_KEY=GE3j2VqzbyfloO6oqa4zJqmQcJuMgKdryNUGdnJl0p4 DATABASE_URL=postgresql://postgres:password@localhost:5433/xm_port_dev DATABASE_URL_ASYNC=postgresql+asyncpg://postgres:password@localhost:5433/xm_port_dev OPENAI_API_KEY=dummy_key_for_test python -m pytest tests/unit/test_file_upload.py::TestFileProcessingService::test_validate_file_size_within_limit -v -s)",
      "Bash(rm:*)",
      "Bash(SECRET_KEY=test_secret JWT_SECRET_KEY=test_jwt_secret DATABASE_URL=sqlite:///test.db DATABASE_URL_ASYNC=sqlite+aiosqlite:///test.db OPENAI_API_KEY=test_key python -m pytest tests/unit/test_file_upload.py::TestFileProcessingService::test_validate_unit_price_field -v)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=sqlite:///test.db DATABASE_URL_ASYNC=sqlite+aiosqlite:///test.db OPENAI_API_KEY=test_key python -m pytest tests/unit/test_file_upload.py::TestFileProcessingService::test_validate_unit_price_field -v)",
      "Bash(SECRET_KEY=GE3j2VqzbyfloO6oqa4zJqmQcJuMgKdryNUGdnJl0p4 DATABASE_URL=postgresql://postgres:password@localhost:5433/xm_port_dev DATABASE_URL_ASYNC=postgresql+asyncpg://postgres:password@localhost:5433/xm_port_dev OPENAI_API_KEY=dummy_key_for_test python -m pytest apps/api/tests/unit/test_file_upload.py -v)",
      "Bash(rm:*)",
      "Bash(SECRET_KEY=test_secret JWT_SECRET_KEY=test_jwt_secret DATABASE_URL=sqlite:///test.db DATABASE_URL_ASYNC=sqlite+aiosqlite:///test.db OPENAI_API_KEY=test_key python -m pytest tests/unit/test_file_upload.py::TestCreditBalanceValidation::test_check_user_credits_sufficient -v)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=sqlite:///test.db DATABASE_URL_ASYNC=sqlite+aiosqlite:///test.db OPENAI_API_KEY=test_key python -m pytest tests/unit/test_file_upload.py::TestCreditBalanceValidation::test_check_user_credits_sufficient -v)",
      "Bash(node:*)",
      "Bash(SECRET_KEY=GE3j2VqzbyfloO6oqa4zJqmQcJuMgKdryNUGdnJl0p4 JWT_SECRET_KEY=GE3j2VqzbyfloO6oqa4zJqmQcJuMgKdryNUGdnJl0p4 DATABASE_URL=postgresql://postgres:password@localhost:5433/xm_port_dev DATABASE_URL_ASYNC=postgresql+asyncpg://postgres:password@localhost:5433/xm_port_dev OPENAI_API_KEY=dummy_key_for_test python -m pytest tests/unit/test_file_upload.py -v)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python -m pytest apps/api/tests/unit/test_file_upload_security.py -v)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python -m pytest tests/unit/test_file_upload.py::TestCreditBalanceValidation::test_check_user_credits_sufficient -v)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python -m pytest tests/unit/test_rate_limiting.py::TestRateLimitingMiddleware::test_upload_rate_limits_configuration -v)",
      "Bash(cp:*)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python -m pytest tests/unit/test_hs_matching_service.py -v)",
      "Bash(npm run dev:*)",
      "Bash(curl:*)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python -m pytest apps/api/tests/unit/test_cache_service.py -v)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python3 -m pytest apps/api/tests/unit/test_cache_service.py -v)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python3 -m pytest tests/unit/test_cache_service.py -v)",
      "Bash(powershell:*)",
      "Bash(source:*)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python -m pytest tests/unit/test_cache_service.py -v)",
      "Bash(PYTHONPATH=/mnt/d/PROJECTS/XM-PORT/apps/api SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" /usr/bin/python3 -m pytest tests/unit/test_cache_service.py -v -s)",
      "Bash(/usr/bin/python3 -m pip install:*)",
      "Bash(PYTHONPATH=/mnt/d/PROJECTS/XM-PORT/apps/api SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" /usr/bin/python3 tests/unit/test_cache_service.py)",
      "Bash(PYTHONPATH=/mnt/d/PROJECTS/XM-PORT/apps/api /usr/bin/python3 -c \"\nimport sys\nsys.path.insert(0, ''.'')\ntry:\n    from src.services.cache_service import CacheService, cache_service\n    from src.services.hs_matching_service import hs_matching_service\n    print(''✅ Cache service imports successfully'')\n    print(''✅ HS matching service imports successfully'')\n    print(''✅ Cache integration completed'')\nexcept Exception as e:\n    print(f''❌ Import error: {e}'')\n\")",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python -m pytest apps/api/tests/unit/test_hs_matching_api.py -v)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python -m pytest apps/api/tests/unit/test_analytics_service.py -v)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python3 -m pytest apps/api/tests/unit/test_analytics_service.py::TestHSCodeAnalyticsService::test_record_matching_operation_success -v)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python -m pytest apps/api/tests/performance/test_hs_matching_performance.py -v -s)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python3 -m pytest tests/performance/test_hs_matching_performance.py::TestPerformanceOptimization::test_single_request_performance -v -s)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python -m pytest apps/api/tests/integration/test_file_processing_hs_integration.py -v)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python3 -m pytest apps/api/tests/integration/test_file_processing_hs_integration.py -v)",
      "Bash(PYTHONPATH=/mnt/d/PROJECTS/XM-PORT/apps/api SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" /usr/bin/python3 -m pytest tests/integration/test_file_processing_hs_integration.py -v)",
      "Bash(PYTHONPATH=/mnt/d/PROJECTS/XM-PORT/apps/api /usr/bin/python3 -c \"\ntry:\n    from src.services.file_processing import FileProcessingService\n    from src.services.hs_matching_service import hs_matching_service\n    from src.models.product_match import ProductMatch\n    print(''✅ All imports successful'')\n    print(''✅ Integration imports working correctly'')\n    \n    # Test FileProcessingService has the new methods\n    import inspect\n    methods = [method for method in dir(FileProcessingService) if not method.startswith(''_'')]\n    print(''FileProcessingService methods:'', methods)\n    \n    if ''process_products_with_hs_matching'' in methods:\n        print(''✅ process_products_with_hs_matching method exists'')\n    if ''process_file_with_hs_matching'' in methods:\n        print(''✅ process_file_with_hs_matching method exists'')\n        \nexcept Exception as e:\n    print(f''❌ Import error: {e}'')\n\")",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python -m pytest apps/api/tests/unit/test_hs_matching_service.py -v --tb=short)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python3 -m pytest apps/api/tests/unit/test_hs_matching_service.py -v --tb=short)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python3 -c \"\nimport sys\nprint(''Python path:'', sys.path)\ntry:\n    import pytest\n    print(''✓ pytest available'')\nexcept ImportError:\n    print(''✗ pytest not available'')\ntry:\n    import asyncio\n    print(''✓ asyncio available'')\nexcept ImportError:\n    print(''✗ asyncio not available'')\n\")",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python -m pytest apps/api/tests/unit/test_hs_matching_service.py -v --tb=short)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python3 -m pytest apps/api/tests/unit/test_hs_matching_service.py -v --tb=short)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python -m pytest apps/api/tests/unit/test_xml_generation_service.py -v)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python3 -m pytest apps/api/tests/unit/test_xml_generation_service.py -v)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python -m pytest tests/unit/test_xml_storage_service.py -v)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python3 -m pytest tests/unit/test_xml_storage_service.py -v)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python3 -c \"\ntry:\n    from src.services.xml_storage import XMLStorageService, xml_storage_service\n    from src.services.xml_generation import XMLGenerationService, xml_generation_service\n    print(''✅ XML Storage service imports successfully'')\n    print(''✅ XML Generation service imports successfully'')\n    \n    # Test service instantiation\n    storage = XMLStorageService()\n    generation = XMLGenerationService()\n    print(''✅ Services instantiate successfully'')\n    \n    # Test lazy loading of storage in generation service\n    gen_storage = generation._get_storage_service()\n    print(''✅ Lazy loading works correctly'')\n    \n    print(''✅ All XML storage integration tests passed'')\nexcept Exception as e:\n    print(f''❌ Integration error: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python3 -c \"import sys; sys.path.insert(0, ''apps/api/src''); from api.v1.xml_generation import generate_xml; print(''✅ XML generation API imports successfully'')\")",
      "Bash(pip3 install:*)",
      "Bash(venv/Scripts/python.exe -m pytest tests/unit/test_xml_generation_service.py::TestXMLGenerationService::test_initialization_success -v)",
      "Bash(venv/Scripts/python.exe -m pytest tests/unit/test_xml_generation_service.py -v --tb=short)",
      "Bash(venv/Scripts/python.exe -m pytest tests/unit/test_xml_generation_service.py::TestXMLGenerationService::test_generate_xml_success -v)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python -m pytest apps/api/tests/integration/test_file_processing_xml_integration.py::TestFileProcessingXMLIntegration::test_end_to_end_workflow_success -v)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python3 -m pytest apps/api/tests/integration/test_file_processing_xml_integration.py::TestFileProcessingXMLIntegration::test_end_to_end_workflow_success -v)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python3 -m pytest tests/integration/test_file_processing_xml_integration.py::TestFileProcessingXMLIntegration::test_end_to_end_workflow_success -v)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python -m pytest apps/api/tests/unit/test_xml_generation_service.py::TestXMLGenerationService::test_initialization_success -v)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python3 -m pytest apps/api/tests/unit/test_xml_generation_service.py::TestXMLGenerationService::test_initialization_success -v)",
      "Bash(npm run lint:*)",
      "Bash(alembic current:*)",
      "Bash(PYTHONPATH=/mnt/d/PROJECTS/XM-PORT/apps/api python3 -m alembic.config current)",
      "Bash(DATABASE_URL=postgresql://postgres:password@localhost:5433/xm_port_dev python3 -c \"\nfrom src.core.database import engine\nimport asyncio\nasync def test_db():\n    try:\n        async with engine.begin() as conn:\n            result = await conn.execute(''SELECT 1'')\n            print(''✅ Database connection successful'')\n    except Exception as e:\n        print(f''❌ Database connection failed: {e}'')\nasyncio.run(test_db())\n\")",
      "Bash(./venv/Scripts/python:*)",
      "Bash(docker compose:*)",
      "Bash(venv/Scripts/python.exe:*)",
      "Bash(venv/Scripts/uvicorn.exe:*)",
      "Bash(DATABASE_URL=postgresql://postgres:password@localhost:5433/xm_port_dev DATABASE_URL_ASYNC=postgresql+asyncpg://postgres:password@localhost:5433/xm_port_dev venv/Scripts/uvicorn.exe src.main:app --host 0.0.0.0 --port 8000 --reload)",
      "Bash(./scripts/docker-dev.sh:*)",
      "Bash(docker:*)",
      "Bash(ip route:*)",
      "Bash(lsof:*)",
      "Bash(kill:*)",
      "Bash(PGPASSWORD=password psql:*)",
      "Bash(./venv/bin/python:*)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=postgresql://postgres:password@localhost:5433/xm_port_dev DATABASE_URL_ASYNC=postgresql+asyncpg://postgres:password@localhost:5433/xm_port_dev OPENAI_API_KEY=\"test_key\" python test_register_debug.py)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=postgresql://postgres:password@localhost:5433/xm_port_dev DATABASE_URL_ASYNC=postgresql+asyncpg://postgres:password@localhost:5433/xm_port_dev OPENAI_API_KEY=\"test_key\" python3 test_register_debug.py)",
      "Bash(PYTHONPATH=/mnt/d/PROJECTS/XM-PORT/apps/api SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=postgresql://postgres:password@localhost:5433/xm_port_dev DATABASE_URL_ASYNC=postgresql+asyncpg://postgres:password@localhost:5433/xm_port_dev OPENAI_API_KEY=\"test_key\" python3 test_register_debug.py)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python -m pytest apps/api/tests/unit/test_processing_jobs_api.py -v)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python3 -m pytest apps/api/tests/unit/test_processing_jobs_api.py -v)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python -m pytest apps/api/tests/unit/test_download_functionality.py -v)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python3 -m pytest apps/api/tests/unit/test_download_functionality.py -v)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python3 -c \"\ntry:\n    from src.services.analytics_service import HSCodeAnalyticsService\n    from src.api.v1.xml_generation import get_xml_download\n    print(''✅ Download functionality imports successfully'')\n    \n    # Test analytics service has the new method\n    analytics = HSCodeAnalyticsService()\n    if hasattr(analytics, ''record_download_activity''):\n        print(''✅ Analytics service has record_download_activity method'')\n    else:\n        print(''❌ Analytics service missing record_download_activity method'')\n        \n    print(''✅ Task 4: File Download Functionality is complete'')\n    \nexcept Exception as e:\n    print(f''❌ Import error: {e}'')\n\")",
      "Bash(PYTHONPATH=/mnt/d/PROJECTS/XM-PORT/apps/api SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python3 -c \"\ntry:\n    from src.services.analytics_service import HSCodeAnalyticsService\n    print(''✅ Download analytics service imports successfully'')\n    \n    # Test analytics service has the new method\n    analytics = HSCodeAnalyticsService()\n    if hasattr(analytics, ''record_download_activity''):\n        print(''✅ Analytics service has record_download_activity method'')\n    else:\n        print(''❌ Analytics service missing record_download_activity method'')\n        \n    print(''✅ Task 4: File Download Functionality is complete'')\n    \nexcept Exception as e:\n    print(f''❌ Import error: {e}'')\n\")",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python3 -c \"\nimport asyncio\nimport sys\nsys.path.insert(0, ''apps/api/src'')\n\nasync def test_user_analytics():\n    try:\n        from services.user_analytics import user_analytics_service\n        print(''✅ User analytics service imported successfully'')\n        \n        # Test that the service can be instantiated\n        print(''✅ Service methods available:'')\n        methods = [method for method in dir(user_analytics_service) if not method.startswith(''_'')]\n        for method in methods:\n            print(f''  - {method}'')\n            \n        print(''✅ User analytics service is ready to use'')\n        \n    except Exception as e:\n        print(f''❌ Import error: {e}'')\n        import traceback\n        traceback.print_exc()\n\nasyncio.run(test_user_analytics())\n\")",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python -m pytest apps/api/tests/unit/test_job_details_api.py -v)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python3 -m pytest apps/api/tests/unit/test_job_details_api.py -v)",
      "Bash(./venv/bin/pip install openpyxl)",
      "Bash(npx eslint:*)",
      "mcp__playwright__browser_navigate",
      "mcp__playwright__browser_install",
      "mcp__playwright__browser_take_screenshot",
      "mcp__playwright__browser_click",
      "mcp__playwright__browser_type",
      "mcp__playwright__browser_snapshot",
      "mcp__playwright__browser_press_key",
      "mcp__playwright__browser_evaluate",
      "mcp__playwright__browser_fill_form",
      "mcp__playwright__browser_resize",
      "mcp__playwright__browser_close",
      "mcp__playwright__browser_wait_for",
      "Bash(npx next:*)",
      "Bash(.venv/bin/python:*)",
      "Bash(SECRET_KEY=\"test_secret\" JWT_SECRET_KEY=\"test_jwt_secret\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" .venv/bin/python -m pytest apps/api/tests/unit/test_hs_matching_service.py::TestHSCodeMatchingService::test_initialization_success -v)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" .venv/bin/python -m pytest apps/api/tests/unit/test_hs_matching_service.py::TestHSCodeMatchingService::test_initialization_success -v)",
      "Bash(/dev/null)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python3 ../../test_s3_fallback.py)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python -m pytest tests/unit/test_file_upload.py -v -k \"test_s3\" --tb=short)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python3 -m pytest tests/integration/test_s3_file_processing.py -v --tb=short)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python -m pytest tests/integration/test_s3_file_processing.py -v --tb=short)",
      "Bash(.venv/bin/pip install:*)",
      "Bash(PYTHONPATH=src SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python3 -c \"\nfrom services.file_processing import FileProcessingService\nfrom core.config import get_settings\nprint(''✅ FileProcessingService imported successfully'')\nsettings = get_settings()\nprint(f''✅ S3 Fallback enabled: {settings.ALLOW_S3_FALLBACK}'')\nprint(f''✅ Environment: {settings.NODE_ENV}'')\nprint(''✅ All core imports working correctly'')\n\")",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python -m pytest tests/unit/test_hs_code_display.py -v --tb=short)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python3 -m pytest tests/unit/test_hs_code_display.py -v --tb=short)",
      "Bash(if [ -f \".venv/bin/python\" ])",
      "Bash(then .venv/bin/python -m pytest tests/unit/test_hs_code_display.py -v --tb=short)",
      "Bash(else echo \"No virtual environment found\")",
      "Bash(fi)",
      "mcp__playwright__browser_console_messages",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python -m pytest apps/api/tests/unit/test_file_upload.py::TestFileProcessingService::test_validate_file_size_within_limit -v)",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python3 -m pytest apps/api/tests/unit/test_file_upload.py::TestFileProcessingService::test_validate_file_size_within_limit -v)",
      "mcp__morphllm-fast-apply__read_file",
      "mcp__morphllm-fast-apply__list_directory",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python3 -c \"\nimport sys\nsys.path.insert(0, ''src'')\nfrom services.file_processing import REQUIRED_COLUMNS, COLUMN_MAPPING\n\nprint(''✅ Required columns from server:'', len(REQUIRED_COLUMNS))\nfor col in sorted(REQUIRED_COLUMNS):\n    print(f''  - {col}'')\n\nprint(''\\n✅ Column mapping:'')\nfor template_header, normalized_name in COLUMN_MAPPING.items():\n    print(f''  \"\"{template_header}\"\" -> \"\"{normalized_name}\"\"'')\n    \nprint(''\\n✅ Template validation check:'')\ntemplate_headers = [''№'',''Наименование товара'',''Страна происхождения'',''Количество мест'',''Часть мест'',''Вид упаковки'',''Количество'',''Единица измерение'',''Цена'',''Брутто кг'',''Нетто кг'',''Процедура'',''Преференция'',''BKU'',''Количество в допольнительной ед. изм.'',''Допольнительная ед. изм.'']\n\nmapped_headers = set()\nfor header in template_headers:\n    if header in COLUMN_MAPPING:\n        mapped_headers.add(COLUMN_MAPPING[header])\n    else:\n        mapped_headers.add(header.lower().replace('' '', ''_'').strip())\n\nmissing = REQUIRED_COLUMNS - mapped_headers\nif missing:\n    print(f''❌ Missing columns: {missing}'')\nelse:\n    print(''✅ All template headers map correctly!'')\n\")",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python3 -c \"\n# Test the validation fix\nimport sys\nsys.path.insert(0, ''src'')\n\n# Test simple file reading\nprint(''✅ Testing validation fix...'')\n\n# Create a mock CSV content with template headers\ncsv_content = ''''''№,Наименование товара,Страна происхождения,Количество мест,Часть мест,Вид упаковки,Количество,Единица измерение,Цена,Брутто кг,Нетто кг,Процедура,Преференция,BKU,Количество в допольнительной ед. изм.,Допольнительная ед. изм.\n1,\"\"Кабель коаксиальный RG-58 50 Ом, длина 100м\"\",Китай,1,1,Коробки,1,шт,50.00,2.5,2.2,40,ОР,123456,100,м''''''\n\nprint(f''✅ Mock CSV has {len(csv_content.split(chr(10)))} rows'')\n\n# Test header parsing\nimport csv\nimport io\nreader = csv.DictReader(io.StringIO(csv_content))\nheaders = list(reader.fieldnames)\nprint(f''✅ Parsed headers: {len(headers)} columns'')\n\n# Test with our mapping\nfrom services.file_processing import COLUMN_MAPPING, REQUIRED_COLUMNS\n\nmapped_headers = set()\nfor header in headers:\n    if header in COLUMN_MAPPING:\n        mapped_headers.add(COLUMN_MAPPING[header])\n        print(f''  ✅ Mapped: \"\"{header}\"\" -> \"\"{COLUMN_MAPPING[header]}\"\"'')\n    else:\n        fallback = header.lower().replace('' '', ''_'').strip()\n        mapped_headers.add(fallback)\n        print(f''  ⚠️  Fallback: \"\"{header}\"\" -> \"\"{fallback}\"\"'')\n\nmissing = REQUIRED_COLUMNS - mapped_headers\nif missing:\n    print(f''❌ Missing columns: {missing}'')\nelse:\n    print(''✅ All required columns present - validation should pass!'')\n\")",
      "mcp__morphllm-fast-apply__read_multiple_files",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python3 -c \"\n# Debug the exact column mapping issue\nimport sys\nsys.path.insert(0, ''apps/api/src'')\n\nfrom services.file_processing import COLUMN_MAPPING, REQUIRED_COLUMNS\n\n# Test headers from the template\ntemplate_headers = [''№'', ''Наименование товара'', ''Страна происхождения'', ''Количество мест'', ''Часть мест'', ''Вид упаковки'', ''Количество'', ''Единица измерение'', ''Цена'', ''Брутто кг'', ''Нетто кг'', ''Процедура'', ''Преференция'', ''BKU'', ''Количество в допольнительной ед. изм.'', ''Допольнительная ед. изм.'']\n\nprint(''🔍 Testing column mapping with template headers:'')\nprint(f''Template headers count: {len(template_headers)}'')\nprint(f''Required columns count: {len(REQUIRED_COLUMNS)}'')\nprint()\n\nprint(''🗂️ Column mapping test:'')\nnormalized_headers = set()\nunmapped_headers = []\n\nfor header in template_headers:\n    if header in COLUMN_MAPPING:\n        mapped_name = COLUMN_MAPPING[header]\n        normalized_headers.add(mapped_name)\n        print(f''✅ \"\"{header}\"\" -> \"\"{mapped_name}\"\"'')\n    else:\n        fallback = header.lower().replace('' '', ''_'').strip()\n        normalized_headers.add(fallback)\n        unmapped_headers.append(header)\n        print(f''⚠️  \"\"{header}\"\" -> \"\"{fallback}\"\" (fallback)'')\n\nprint()\nprint(f''📊 Mapping results:'')\nprint(f''Normalized headers: {sorted(normalized_headers)}'')\nprint(f''Required columns: {sorted(REQUIRED_COLUMNS)}'')\n\nmissing = REQUIRED_COLUMNS - normalized_headers\nif missing:\n    print(f''❌ Missing columns: {missing}'')\n    print(f''Missing count: {len(missing)}'')\nelse:\n    print(''✅ All required columns found!'')\n\nif unmapped_headers:\n    print(f''⚠️  Unmapped headers: {unmapped_headers}'')\n\")",
      "Bash(SECRET_KEY=\"test_secret_key_that_is_32_chars_long\" JWT_SECRET_KEY=\"test_jwt_secret_key_that_is_32_chars_long\" DATABASE_URL=\"sqlite:///test.db\" DATABASE_URL_ASYNC=\"sqlite+aiosqlite:///test.db\" OPENAI_API_KEY=\"test_key\" python -m pytest apps/api/tests/unit/test_column_mapping_validation.py -v --tb=short)",
      "Bash(echo:*)",
      "Bash(sed:*)",
      "Bash(npm run typecheck:*)",
      "Bash(DATABASE_URL=postgresql://postgres:password@localhost:5433/xm_port_dev python -m alembic revision -m \"Fix origin_country constraint to allow 2-3 character codes\")"
    ],
    "deny": [],
    "ask": []
  }
}