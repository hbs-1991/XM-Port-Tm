
services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: xm-port-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: xm_port_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d xm_port_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - xm-port-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: xm-port-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - xm-port-network

  # FastAPI Backend (Development)
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
      target: development
    container_name: xm-port-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app/src
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/xm_port_dev
      - DATABASE_URL_ASYNC=postgresql+asyncpg://postgres:password@postgres:5432/xm_port_dev
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=GE3j2VqzbyfloO6oqa4zJqmQcJuMgKdryNUGdnJl0p4
      - JWT_SECRET_KEY=GE3j2VqzbyfloO6oqa4zJqmQcJuMgKdryNUGdnJl0p4
      - OPENAI_API_KEY=${OPENAI_API_KEY:-dummy_key_for_development}
      - CORS_ORIGINS=["http://localhost:3000", "http://web:3000"]
    volumes:
      - ./apps/api:/app
      - ./packages/shared:/packages/shared:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"] 
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - xm-port-network

  # Next.js Frontend (Development)
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
      target: development
    container_name: xm-port-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=development-nextauth-secret-at-least-32-chars-long
      - WATCHPACK_POLLING=true
    volumes:
      - ./apps/web:/app/apps/web
      - ./packages:/app/packages:ro
      - node_modules_cache:/app/node_modules
      - next_cache:/app/apps/web/.next
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"] 
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - xm-port-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  node_modules_cache:
    driver: local
  next_cache:
    driver: local

networks:
  xm-port-network:
    driver: bridge
    name: xm-port-network